import sys
from os import path

sys.path.extend(['..', '../deep_inversion'])

import torch
import torch.nn as nn
from torch.utils.data import DataLoader
from torchvision import datasets, transforms, models
from tqdm import tqdm

from deep_inversion.params import MEANS, STDS

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')


def get_top_k_results(probabilities, targets, k):
    # get the top-k predictions for each image
    top_k_classes = torch.topk(probabilities, k=k).indices
    # check whether the correct label is in the top-k predictions for each image
    results = [targets[i] in top_k_classes[i] for i in range(len(targets))]
    return results


def evaluate_synthesized_dataset(dataset_path='dataset'):
    mean, std = MEANS['ImageNet'], STDS['ImageNet']
    transform_preprocess = transforms.Compose([transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)])
    dataset = datasets.ImageFolder(dataset_path, transform=transform_preprocess)
    # reverse the class_to_idx dict auto-generated by datasets.ImageFolder
    idx_to_class = {v: int(k) for k, v in dataset.class_to_idx.items()}
    dataset_loader = DataLoader(dataset, batch_size=32, shuffle=True)
    model = models.resnet152(pretrained=True).to(device)
    model.eval()

    top_1_results = []
    top_5_results = []
    for batch, targets in tqdm(dataset_loader):
        batch, targets = batch.to(device), targets.to(device)
        # get the original ImageNet targets instead of the new ones generated by torch.ImageFolder
        targets = [idx_to_class[idx.item()] for idx in targets]
        output = model(batch)
        probabilities = nn.functional.softmax(output, dim=1)
        top_1_results.extend(get_top_k_results(probabilities, targets, 1))
        top_5_results.extend(get_top_k_results(probabilities, targets, 5))

    top_1_accuracy = sum(top_1_results) / len(top_1_results)
    top_5_accuracy = sum(top_5_results) / len(top_5_results)

    with open(path.join(dataset_path, 'accuracy_scores.txt'), 'w') as f:
        print(f'top-1 accuracy: {top_1_accuracy}%', file=f)
        print(f'top-5 accuracy: {top_5_accuracy}%', file=f)
    print(f'top-1 accuracy: {top_1_accuracy}%')
    print(f'top-5 accuracy: {top_5_accuracy}%')


def main():
    evaluate_synthesized_dataset()


if __name__ == '__main__':
    main()
