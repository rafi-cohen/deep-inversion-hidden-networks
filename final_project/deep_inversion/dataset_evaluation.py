import os
from os import path

import torch
import torch.nn as nn
from torch.utils.data import DataLoader
from torchvision import datasets, transforms, models
from tqdm import tqdm

from params import MEANS, STDS

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')


def rearrange_images_in_subfolders(dataset_dir):
    """
    Sorts images in a dataset folder into class-specific sub-folders (as required by torch.datasets.ImageFolder).
    Expected image filename format: 'batch_i_image_j_label_k.png'
    :param dataset_dir: the dataset's folder path
    """
    for image_filename in os.listdir(dataset_dir):
        image_label = image_filename.replace('_', '.').split('.')[5]
        label_dir_path = path.join(dataset_dir, image_label)
        if not path.isdir(label_dir_path):
            os.mkdir(label_dir_path)
        original_image_path = path.join(dataset_dir, image_filename)
        new_image_path = path.join(label_dir_path, image_filename)
        os.replace(original_image_path, new_image_path)


def get_top_k_results(probabilities, targets, k):
    # get the top-k predictions for each image
    top_k_classes = torch.topk(probabilities, k=k).indices
    # check whether the correct label is in the top-k predictions for each image
    results = [targets[i] in top_k_classes[i] for i in range(len(targets))]
    return results


def evaluate_synthesized_dataset(dataset_path='dataset'):
    mean, std = MEANS['ImageNet'], STDS['ImageNet']
    transform_preprocess = transforms.Compose([transforms.ToTensor(), transforms.Normalize(mean=mean, std=std)])
    dataset = datasets.ImageFolder(dataset_path, transform=transform_preprocess)
    # reverse the class_to_idx dict auto-generated by datasets.ImageFolder
    idx_to_class = {v: int(k) for k, v in dataset.class_to_idx.items()}
    dataset_loader = DataLoader(dataset, batch_size=32, shuffle=True)
    model = models.resnet152(pretrained=True).to(device)
    model.eval()

    top_1_results = []
    top_5_results = []
    for batch, targets in tqdm(dataset_loader):
        batch, targets = batch.to(device), targets.to(device)
        # get the original ImageNet targets instead of the new ones generated by torch.ImageFolder
        targets = [idx_to_class[idx.item()] for idx in targets]
        output = model(batch)
        probabilities = nn.functional.softmax(output, dim=1)
        top_1_results.extend(get_top_k_results(probabilities, targets, 1))
        top_5_results.extend(get_top_k_results(probabilities, targets, 5))

    top_1_accuracy = sum(top_1_results) / len(top_1_results)
    top_5_accuracy = sum(top_5_results) / len(top_5_results)

    with open(path.join(dataset_path, 'accuracy_scores.txt'), 'w') as f:
        print(f'top-1 accuracy: {top_1_accuracy}%', file=f)
        print(f'top-5 accuracy: {top_5_accuracy}%', file=f)
    print(f'top-1 accuracy: {top_1_accuracy}%')
    print(f'top-5 accuracy: {top_5_accuracy}%')


def main():
    # rearrange_images_in_subfolders('dataset')
    evaluate_synthesized_dataset(dataset_path='dataset')


if __name__ == '__main__':
    main()


